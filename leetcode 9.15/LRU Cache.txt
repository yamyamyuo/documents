public class LRUCache {
    
    private HashMap<Integer, DoubleLinkedList> map = new HashMap<Integer, DoubleLinkedList>();
    private DoubleLinkedList head;
    private DoubleLinkedList end;
    private int capacity;
    private int len;
    
    public LRUCache(int capacity) {
        this.capacity = capacity;
        this.len = 0;
    }
    
    public int get(int key) {
        if (map.containsKey(key)) {
            DoubleLinkedList latest = map.get(key);
            removenode(latest);
            sethead(latest);
            return latest.val;
        } else {
            return -1;
        }
    }
    
    public void removenode(DoubleLinkedList node){
        DoubleLinkedList cur = node;
        DoubleLinkedList pre = cur.pre;
        DoubleLinkedList next = cur.next;
        
        if (pre == null) {
            head = next;
        } else
            pre.next = next;
        
        if (next == null) {
            end = pre;
        } else
            next.pre = pre;
    }
    
    public void sethead(DoubleLinkedList node) {
        node.next = head;
        node.pre = null;//重要啊
        if (head != null) {
            head.pre = node;
        } else {
            end = node;
        }
        head = node;
    }
    
    public void set(int key, int value) {
        if (map.containsKey(key)) {
            DoubleLinkedList latest = map.get(key);
            latest.val = value;
            removenode(latest);
            sethead(latest);
        } else {
            DoubleLinkedList newnode = new DoubleLinkedList(key, value);
            map.put(key,newnode);
            if (len < capacity) {
                sethead(newnode);
                len++;
            } else {
                map.remove(end.key);
                removenode(end);
                if (end!=null) end.next = null;//import！
                sethead(newnode);
            }
        }
    }
}
 class DoubleLinkedList{
        public DoubleLinkedList pre;
        public DoubleLinkedList next;
        public int val;
        public int key;
        public DoubleLinkedList(int key, int value) {
            this.key = key;
            this.val = value;
        }
    }