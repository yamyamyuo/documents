//二维dp的做法
public class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int [][]dp = new int [m][n];
        dp[0][0] = grid[0][0];
        for (int i = 1; i < n; i++) {//row
            dp[0][i] = dp[0][i-1] + grid[0][i];
        }
        for (int j = 1; j < m; j++) {//col
            dp[j][0] = dp[j-1][0] + grid[j][0];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];
            }
        }
        return dp[m-1][n-1];
    }
}

//一维dp的做法
public class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int []dp = new int[n];
        dp[0] = grid[0][0];
        for (int i = 1; i < n; i++) {
           dp[i] = grid[0][i] + dp[i-1];
        }
        for (int i = 1; i < m; i++) {
            dp[0] = dp[0] + grid[i][0];
            for (int j = 1; j < n; j++) {
                dp[j] = Math.min(dp[j-1],dp[j]) + grid[i][j];
            }
        }
        return dp[n-1];
    }
}