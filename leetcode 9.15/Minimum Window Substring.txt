public String minWindow(String S, String T) {
		// 因为处理的是字符，所以可以利用ASCII字符来保存
		int[] needToFind = new int[256];	// 保存T中需要查找字符的个数，该数组一旦初始化完毕就不再改动
		int[] hasFound = new int[256];		// 保存S中已经找到字符的个数，该数组会动态变化
		
		for(int i=0; i<T.length(); i++){	// 初始化needToFind为需要查找字符的个数，
			needToFind[T.charAt(i)]++;	// 如例子中T为ABC，则将会被初始化为：needToFind[65]=1, nTF[66]=2, nTF[67]=3
		}
		
		int count = 0;		// 用于检测第一个符合T的S的字串
		int minWindowSize = Integer.MAX_VALUE;	// 最小窗口大小
		int start = 0, end = 0;		// 窗口的开始喝结束指针
		String window = "";			// 最小窗口对应的字串
		
		for(; end<S.length(); end++){		// 用end来遍历S字符串
			if(needToFind[S.charAt(end)] == 0){	// 表示可以忽略的字符，即除了T(ABC)外的所有字符
				continue;
			}
			char c = S.charAt(end);
			hasFound[c]++;		// 找到一个需要找的字符
			
			if(hasFound[c] <= needToFind[c]){	// 如果找到的已经超过了需要的，就没必要继续增加count
				count++;
			}
			if(count == T.length()){	// 该窗口中至少包含了T
				while(needToFind[S.charAt(start)] == 0 || 	// 压缩窗口，往后移start指针，一种情况是start指针指的都是可忽略的字符
						hasFound[S.charAt(start)] > needToFind[S.charAt(start)]){	// 另一种情况是已经找到字符的个数超过了需要找的个数，因此可以舍弃掉多余的部分
					if(hasFound[S.charAt(start)] > needToFind[S.charAt(start)]){
						hasFound[S.charAt(start)]--;		// 舍弃掉多余的部分
					}
					start++;	// 压缩窗口
				}
				
				if(end-start+1 < minWindowSize){		// 保存最小窗口
					minWindowSize = end-start+1;
					window = S.substring(start, end+1);
				}
			}
		}
		return window;
	}