public class Solution {
	public static boolean isPalindrome(String s) {
		int len = s.length();
		int i = 0;
		int j = len - 1;
		while (i < j) {
			if(s.charAt(i)!=s.charAt(j)) {
				return false;
			}
			i++;
			j--;
		}
		return true;
	}
	public static void dfs(String s, List<List<String>> res, List<String> tmp) {
		if (s.length() == 0) {
			res.add(new ArrayList<String>(tmp));
		}
		for (int i = 1; i <= s.length(); i++) {

			String sub = s.substring(0,i);
			if (isPalindrome(sub)) {
				tmp.add(sub);
				dfs(s.substring(i),res,tmp);
				tmp.remove(tmp.size() - 1);
			}
		}
	}
	
    public static List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<List<String>>();
        List<String> tmp = new ArrayList<String>();
        dfs(s,res,tmp);
        return res;
    }
}