public class Solution {
    public void helper(int[] candidates, int target, int start, int sum, List<List<Integer>> res, List<Integer> path) {
        if (sum>target)//不要剪枝之后有可能会让sum>target,所以必须让循环退出来
            return ;
        if (sum == target) {
            res.add(new ArrayList<Integer>(path));
            return ;
        }
        for (int i = start; i < candidates.length ; i++) {//&& target - sum >= candidates[i] //不要剪枝也可以
            path.add(candidates[i]);
            helper(candidates, target, i, sum+candidates[i], res, path);
            path.remove(path.size()-1);
        }
        
    }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
           List<List<Integer>> res = new ArrayList<List<Integer>>();
           List<Integer> path = new ArrayList<Integer>();
           Arrays.sort(candidates);//题目要求输出是non-decreasing，so....
           helper(candidates, target, 0, 0, res, path);
           return res;
    }
}
/*为什么它没有产生duplicate，而在combination sumII中就会产生duplicate呢*/