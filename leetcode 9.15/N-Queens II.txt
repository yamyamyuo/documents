public class Solution {

    
    public void helper2(int n, int num, int []count, int [] perm) {
       if (n == num) {
           count[0] += 1;
           return;
       }
       else {
           int i;
           //在这个循环中，i代表列，j代表行，num也是代表行
           for (i = 0; i < n; i++) {// i represent col
               int j;
               boolean ok = true;
               for (j = 0; j < num; j++) {//num represent row
                   if (perm[j] == i || perm[j] - j == i - num || perm[j] + j == i+num)
                        ok = false;
               }
               if (ok) {
                    perm[num] = i;//看一下上面的num 和i，对上了~
                    helper2(n,num+1,count,perm);
               }
           }
       }
    }


    public int totalNQueens(int n) {
        
        int []perm = new int[n];
        int []count = {0};
        helper2(n, 0, count, perm);
        return count[0];
    }
}


//方法二

public class Solution {
    
    public boolean isValid(int []A, int r){
        for (int i=0;i<r;i++){
            if ( (A[i]==A[r])||(Math.abs(A[i]-A[r])==(r-i))){//斜率只有这一种哦
                return false;
            }
        }
        return true;
    }
    public void nqueens(int []A , int cur, int n,int[]res){
        if (cur==n){ res[0]+=1;return;}
        else{
            for (int i=0;i<n;i++){
                A[cur]=i;
                if (isValid(A,cur)){
                    nqueens(A,cur+1,n,res);
                }
            }
        }
    }
    public int totalNQueens(int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int []res={0};
        int []A = new int[n];
        nqueens(A,0,n,res);
        return res[0];
    }
}