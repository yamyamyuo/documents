public class Solution {
public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> path = new ArrayList<Integer>();
        Stack<TreeNode> stk = new Stack<TreeNode>();

        while (root != null || !stk.empty()) {
        	if (root != null) {
        		//when left or right is not null
        		path.add(root.val);
        		stk.push(root);
        		root = root.left;
        	} else {
        		root = stk.pop().right;
        	}
        }
        return path;
    }
}
//第二种方法
public void preorder(TreeNode root) {
	p = root;
	if (p!=null) s.push(p);
	
	while (!s.isEmpty()) {
	p = s.peek();
	s.pop();
	path.add(p);
	
	if (p.right!=null) s.push(p.right);
	if (p.left != null) s.push(p.left);
}


}

//递归
public class Solution {
    public void dfs(TreeNode root, List<Integer> res) {
        if (root == null)
            return ;
        res.add(root.val);
        dfs(root.left,res);
        dfs(root.right,res);
    }
    
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        dfs(root, res);
        return res;
        
    }
}

//其实跟in order仅仅是path的输出顺序不同
 public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        Stack<TreeNode> stk = new Stack<TreeNode>();
        TreeNode p = root;
        while (!stk.isEmpty() || p != null) {
            while (p!=null) {
                res.add(p.val);
                stk.push(p);
                p = p.left;
            }
            p = stk.pop().right;
        }
        return res;
        
    }
