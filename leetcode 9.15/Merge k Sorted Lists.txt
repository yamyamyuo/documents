
//  O(kn*Logn) time

public class Solution {
    public ListNode mergeKLists(List<ListNode> lists) {
        PriorityQueue<ListNode> heap = new PriorityQueue<ListNode>(11,new Comparator<ListNode>() {
            @Override
            public int compare (ListNode n1, ListNode n2) {
                return n1.val - n2.val;
            }
            
        }); 
        for (int i = 0;  i < lists.size(); i++) {
            ListNode node = lists.get(i);
            if (node != null)
                heap.offer(node);
        }
        ListNode dummy = new ListNode(0);
        ListNode pre = dummy;
        while (heap.size()>0) {
            ListNode cur = heap.poll();
            if (cur!=null) {
                pre.next = cur;
                pre = pre.next;
                if (cur.next!=null)
                    heap.offer(cur.next);
            }
            
        }
        return dummy.next;
        
    }
}


//分治法
public class Solution {
    public ListNode mergeKLists(List<ListNode> lists) {
        if (lists.size() == 0)
            return null;
        return mergeKLists2(lists, 0, lists.size()-1);
    }
    
    public ListNode mergeKLists2(List<ListNode> lists, int start, int end) {
        if (start < end) {
            int mid = start + (end - start)/2;
            return merge(mergeKLists2(lists, start, mid), mergeKLists2(lists, mid+1, end));
        }
        return lists.get(start);
    }
    
    public ListNode merge(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode p = dummy;
        while (l1!=null&&l2!=null) {
            if (l1.val < l2.val) {
                p.next = l1;
                p = p.next;
                l1 = l1.next;
            } else {
                p.next = l2;
                p = p.next;
                l2 = l2.next;
            }
        }
        if (l1!=null)
            p.next = l1;
        else
            p.next = l2;
        return dummy.next;
    }
}